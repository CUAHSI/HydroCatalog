#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cuahsi.Wof.WaterDataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class MetadataCatalogDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertVariable(Variable instance);
    partial void UpdateVariable(Variable instance);
    partial void DeleteVariable(Variable instance);
    partial void InsertSite(Site instance);
    partial void UpdateSite(Site instance);
    partial void DeleteSite(Site instance);
    partial void InsertSiteProperties(SiteProperties instance);
    partial void UpdateSiteProperties(SiteProperties instance);
    partial void DeleteSiteProperties(SiteProperties instance);
    partial void InsertVariableProperties(VariableProperties instance);
    partial void UpdateVariableProperties(VariableProperties instance);
    partial void DeleteVariableProperties(VariableProperties instance);
    partial void InsertSeries(Series instance);
    partial void UpdateSeries(Series instance);
    partial void DeleteSeries(Series instance);
    #endregion
		
		public MetadataCatalogDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MetadataCatalogDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MetadataCatalogDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MetadataCatalogDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Variable> Variables
		{
			get
			{
				return this.GetTable<Variable>();
			}
		}
		
		public System.Data.Linq.Table<Site> Sites
		{
			get
			{
				return this.GetTable<Site>();
			}
		}
		
		public System.Data.Linq.Table<SiteProperties> SiteProperties
		{
			get
			{
				return this.GetTable<SiteProperties>();
			}
		}
		
		public System.Data.Linq.Table<VariableProperties> VariableProperties
		{
			get
			{
				return this.GetTable<VariableProperties>();
			}
		}
		
		public System.Data.Linq.Table<Series> Series
		{
			get
			{
				return this.GetTable<Series>();
			}
		}
	}
	
	[Table(Name="")]
	public partial class Variable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VariableCode;
		
		private string _VariableName;
		
		private int _VariableUnitsId;
		
		private int _TimeUnitsId;
		
		private float _TimeSupport;
		
		private bool _isRegular;
		
		private string _Speciation;
		
		private string _SampleMedium;
		
		private string _DataType;
		
		private System.Nullable<float> _NoDataValue;
		
		private string _VariableUnitsAbbreviation;
		
		private string _TimeUnitsAbbreviation;
		
		private string _VariableUnitsName;
		
		private string _TimeUnitsName;
		
		private string _VariableVocabulary;
		
		private EntitySet<VariableProperties> _VariableProperties;
		
		private EntityRef<Series> _Series;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVariableCodeChanging(string value);
    partial void OnVariableCodeChanged();
    partial void OnVariableNameChanging(string value);
    partial void OnVariableNameChanged();
    partial void OnVariableUnitsIdChanging(int value);
    partial void OnVariableUnitsIdChanged();
    partial void OnTimeUnitsIdChanging(int value);
    partial void OnTimeUnitsIdChanged();
    partial void OnTimeSupportChanging(float value);
    partial void OnTimeSupportChanged();
    partial void OnisRegularChanging(bool value);
    partial void OnisRegularChanged();
    partial void OnSpeciationChanging(string value);
    partial void OnSpeciationChanged();
    partial void OnSampleMediumChanging(string value);
    partial void OnSampleMediumChanged();
    partial void OnDataTypeChanging(string value);
    partial void OnDataTypeChanged();
    partial void OnNoDataValueChanging(System.Nullable<float> value);
    partial void OnNoDataValueChanged();
    partial void OnVariableUnitsAbbreviationChanging(string value);
    partial void OnVariableUnitsAbbreviationChanged();
    partial void OnTimeUnitsAbbreviationChanging(string value);
    partial void OnTimeUnitsAbbreviationChanged();
    partial void OnVariableUnitsNameChanging(string value);
    partial void OnVariableUnitsNameChanged();
    partial void OnTimeUnitsNameChanging(string value);
    partial void OnTimeUnitsNameChanged();
    partial void OnVariableVocabularyChanging(string value);
    partial void OnVariableVocabularyChanged();
    #endregion
		
		public Variable()
		{
			this._VariableProperties = new EntitySet<VariableProperties>(new Action<VariableProperties>(this.attach_VariableProperties), new Action<VariableProperties>(this.detach_VariableProperties));
			this._Series = default(EntityRef<Series>);
			OnCreated();
		}
		
		[Column(Storage="_VariableCode", DbType="nvarchar(50)", CanBeNull=false, IsPrimaryKey=true)]
		public string VariableCode
		{
			get
			{
				return this._VariableCode;
			}
			set
			{
				if ((this._VariableCode != value))
				{
					if (this._Series.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVariableCodeChanging(value);
					this.SendPropertyChanging();
					this._VariableCode = value;
					this.SendPropertyChanged("VariableCode");
					this.OnVariableCodeChanged();
				}
			}
		}
		
		[Column(Storage="_VariableName", DbType="varchar", CanBeNull=false)]
		public string VariableName
		{
			get
			{
				return this._VariableName;
			}
			set
			{
				if ((this._VariableName != value))
				{
					this.OnVariableNameChanging(value);
					this.SendPropertyChanging();
					this._VariableName = value;
					this.SendPropertyChanged("VariableName");
					this.OnVariableNameChanged();
				}
			}
		}
		
		[Column(Storage="_VariableUnitsId", DbType="int")]
		public int VariableUnitsId
		{
			get
			{
				return this._VariableUnitsId;
			}
			set
			{
				if ((this._VariableUnitsId != value))
				{
					this.OnVariableUnitsIdChanging(value);
					this.SendPropertyChanging();
					this._VariableUnitsId = value;
					this.SendPropertyChanged("VariableUnitsId");
					this.OnVariableUnitsIdChanged();
				}
			}
		}
		
		[Column(Storage="_TimeUnitsId", DbType="int")]
		public int TimeUnitsId
		{
			get
			{
				return this._TimeUnitsId;
			}
			set
			{
				if ((this._TimeUnitsId != value))
				{
					this.OnTimeUnitsIdChanging(value);
					this.SendPropertyChanging();
					this._TimeUnitsId = value;
					this.SendPropertyChanged("TimeUnitsId");
					this.OnTimeUnitsIdChanged();
				}
			}
		}
		
		[Column(Storage="_TimeSupport", DbType="float")]
		public float TimeSupport
		{
			get
			{
				return this._TimeSupport;
			}
			set
			{
				if ((this._TimeSupport != value))
				{
					this.OnTimeSupportChanging(value);
					this.SendPropertyChanging();
					this._TimeSupport = value;
					this.SendPropertyChanged("TimeSupport");
					this.OnTimeSupportChanged();
				}
			}
		}
		
		[Column(Storage="_isRegular", DbType="bit")]
		public bool isRegular
		{
			get
			{
				return this._isRegular;
			}
			set
			{
				if ((this._isRegular != value))
				{
					this.OnisRegularChanging(value);
					this.SendPropertyChanging();
					this._isRegular = value;
					this.SendPropertyChanged("isRegular");
					this.OnisRegularChanged();
				}
			}
		}
		
		[Column(Storage="_Speciation", DbType="nvarchar(255)", CanBeNull=false)]
		public string Speciation
		{
			get
			{
				return this._Speciation;
			}
			set
			{
				if ((this._Speciation != value))
				{
					this.OnSpeciationChanging(value);
					this.SendPropertyChanging();
					this._Speciation = value;
					this.SendPropertyChanged("Speciation");
					this.OnSpeciationChanged();
				}
			}
		}
		
		[Column(Storage="_SampleMedium", DbType="nvarchar(255)", CanBeNull=false)]
		public string SampleMedium
		{
			get
			{
				return this._SampleMedium;
			}
			set
			{
				if ((this._SampleMedium != value))
				{
					this.OnSampleMediumChanging(value);
					this.SendPropertyChanging();
					this._SampleMedium = value;
					this.SendPropertyChanged("SampleMedium");
					this.OnSampleMediumChanged();
				}
			}
		}
		
		[Column(Storage="_DataType", DbType="nvarchar(255)", CanBeNull=false)]
		public string DataType
		{
			get
			{
				return this._DataType;
			}
			set
			{
				if ((this._DataType != value))
				{
					this.OnDataTypeChanging(value);
					this.SendPropertyChanging();
					this._DataType = value;
					this.SendPropertyChanged("DataType");
					this.OnDataTypeChanged();
				}
			}
		}
		
		[Column(Storage="_NoDataValue", DbType="float")]
		public System.Nullable<float> NoDataValue
		{
			get
			{
				return this._NoDataValue;
			}
			set
			{
				if ((this._NoDataValue != value))
				{
					this.OnNoDataValueChanging(value);
					this.SendPropertyChanging();
					this._NoDataValue = value;
					this.SendPropertyChanged("NoDataValue");
					this.OnNoDataValueChanged();
				}
			}
		}
		
		[Column(Storage="_VariableUnitsAbbreviation", DbType="nvarchar(50)", CanBeNull=false)]
		public string VariableUnitsAbbreviation
		{
			get
			{
				return this._VariableUnitsAbbreviation;
			}
			set
			{
				if ((this._VariableUnitsAbbreviation != value))
				{
					this.OnVariableUnitsAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._VariableUnitsAbbreviation = value;
					this.SendPropertyChanged("VariableUnitsAbbreviation");
					this.OnVariableUnitsAbbreviationChanged();
				}
			}
		}
		
		[Column(Storage="_TimeUnitsAbbreviation", DbType="nvarchar(255)", CanBeNull=false)]
		public string TimeUnitsAbbreviation
		{
			get
			{
				return this._TimeUnitsAbbreviation;
			}
			set
			{
				if ((this._TimeUnitsAbbreviation != value))
				{
					this.OnTimeUnitsAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._TimeUnitsAbbreviation = value;
					this.SendPropertyChanged("TimeUnitsAbbreviation");
					this.OnTimeUnitsAbbreviationChanged();
				}
			}
		}
		
		[Column(Storage="_VariableUnitsName", DbType="nvarchar(255)", CanBeNull=false)]
		public string VariableUnitsName
		{
			get
			{
				return this._VariableUnitsName;
			}
			set
			{
				if ((this._VariableUnitsName != value))
				{
					this.OnVariableUnitsNameChanging(value);
					this.SendPropertyChanging();
					this._VariableUnitsName = value;
					this.SendPropertyChanged("VariableUnitsName");
					this.OnVariableUnitsNameChanged();
				}
			}
		}
		
		[Column(Storage="_TimeUnitsName", DbType="nvarchar(255)", CanBeNull=false)]
		public string TimeUnitsName
		{
			get
			{
				return this._TimeUnitsName;
			}
			set
			{
				if ((this._TimeUnitsName != value))
				{
					this.OnTimeUnitsNameChanging(value);
					this.SendPropertyChanging();
					this._TimeUnitsName = value;
					this.SendPropertyChanged("TimeUnitsName");
					this.OnTimeUnitsNameChanged();
				}
			}
		}
		
		[Column(Storage="_VariableVocabulary", CanBeNull=false)]
		public string VariableVocabulary
		{
			get
			{
				return this._VariableVocabulary;
			}
			set
			{
				if ((this._VariableVocabulary != value))
				{
					this.OnVariableVocabularyChanging(value);
					this.SendPropertyChanging();
					this._VariableVocabulary = value;
					this.SendPropertyChanged("VariableVocabulary");
					this.OnVariableVocabularyChanged();
				}
			}
		}
		
		[Association(Name="Variable_VariableProperties", Storage="_VariableProperties", ThisKey="VariableCode", OtherKey="VariableCode")]
		public EntitySet<VariableProperties> VariableProperties
		{
			get
			{
				return this._VariableProperties;
			}
			set
			{
				this._VariableProperties.Assign(value);
			}
		}
		
		[Association(Name="Series_Variable", Storage="_Series", ThisKey="VariableCode", OtherKey="VariableCode", IsForeignKey=true)]
		public Series Series
		{
			get
			{
				return this._Series.Entity;
			}
			set
			{
				Series previousValue = this._Series.Entity;
				if (((previousValue != value) 
							|| (this._Series.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Series.Entity = null;
						previousValue.Variables = null;
					}
					this._Series.Entity = value;
					if ((value != null))
					{
						value.Variables = this;
						this._VariableCode = value.VariableCode;
					}
					else
					{
						this._VariableCode = default(string);
					}
					this.SendPropertyChanged("Series");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VariableProperties(VariableProperties entity)
		{
			this.SendPropertyChanging();
			entity.Variable = this;
		}
		
		private void detach_VariableProperties(VariableProperties entity)
		{
			this.SendPropertyChanging();
			entity.Variable = null;
		}
	}
	
	[Table(Name="")]
	public partial class Site : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SiteId;
		
		private string _SiteCode;
		
		private string _SiteName;
		
		private float _Latitude;
		
		private float _Longitude;
		
		private string _NetworkCode;
		
		private EntitySet<SiteProperties> _SiteProperties;
		
		private EntityRef<Series> _Series;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSiteIdChanging(int value);
    partial void OnSiteIdChanged();
    partial void OnSiteCodeChanging(string value);
    partial void OnSiteCodeChanged();
    partial void OnSiteNameChanging(string value);
    partial void OnSiteNameChanged();
    partial void OnLatitudeChanging(float value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(float value);
    partial void OnLongitudeChanged();
    partial void OnNetworkCodeChanging(string value);
    partial void OnNetworkCodeChanged();
    #endregion
		
		public Site()
		{
			this._SiteProperties = new EntitySet<SiteProperties>(new Action<SiteProperties>(this.attach_SiteProperties), new Action<SiteProperties>(this.detach_SiteProperties));
			this._Series = default(EntityRef<Series>);
			OnCreated();
		}
		
		[Column(Storage="_SiteId", DbType="int", IsPrimaryKey=true)]
		public int SiteId
		{
			get
			{
				return this._SiteId;
			}
			set
			{
				if ((this._SiteId != value))
				{
					if (this._Series.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIdChanging(value);
					this.SendPropertyChanging();
					this._SiteId = value;
					this.SendPropertyChanged("SiteId");
					this.OnSiteIdChanged();
				}
			}
		}
		
		[Column(Storage="_SiteCode", DbType="nvarchar(50)", CanBeNull=false)]
		public string SiteCode
		{
			get
			{
				return this._SiteCode;
			}
			set
			{
				if ((this._SiteCode != value))
				{
					this.OnSiteCodeChanging(value);
					this.SendPropertyChanging();
					this._SiteCode = value;
					this.SendPropertyChanged("SiteCode");
					this.OnSiteCodeChanged();
				}
			}
		}
		
		[Column(Storage="_SiteName", DbType="nvarchar(255)", CanBeNull=false)]
		public string SiteName
		{
			get
			{
				return this._SiteName;
			}
			set
			{
				if ((this._SiteName != value))
				{
					this.OnSiteNameChanging(value);
					this.SendPropertyChanging();
					this._SiteName = value;
					this.SendPropertyChanged("SiteName");
					this.OnSiteNameChanged();
				}
			}
		}
		
		[Column(Storage="_Latitude", DbType="float")]
		public float Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[Column(Storage="_Longitude", DbType="float")]
		public float Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[Column(Storage="_NetworkCode", CanBeNull=false)]
		public string NetworkCode
		{
			get
			{
				return this._NetworkCode;
			}
			set
			{
				if ((this._NetworkCode != value))
				{
					this.OnNetworkCodeChanging(value);
					this.SendPropertyChanging();
					this._NetworkCode = value;
					this.SendPropertyChanged("NetworkCode");
					this.OnNetworkCodeChanged();
				}
			}
		}
		
		[Association(Name="Site_SiteProperties", Storage="_SiteProperties", ThisKey="SiteId", OtherKey="SiteId")]
		public EntitySet<SiteProperties> SiteProperties
		{
			get
			{
				return this._SiteProperties;
			}
			set
			{
				this._SiteProperties.Assign(value);
			}
		}
		
		[Association(Name="Series_Site", Storage="_Series", ThisKey="SiteId", OtherKey="SiteId", IsForeignKey=true)]
		public Series Series
		{
			get
			{
				return this._Series.Entity;
			}
			set
			{
				Series previousValue = this._Series.Entity;
				if (((previousValue != value) 
							|| (this._Series.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Series.Entity = null;
						previousValue.Sites = null;
					}
					this._Series.Entity = value;
					if ((value != null))
					{
						value.Sites = this;
						this._SiteId = value.SiteId;
					}
					else
					{
						this._SiteId = default(int);
					}
					this.SendPropertyChanged("Series");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SiteProperties(SiteProperties entity)
		{
			this.SendPropertyChanging();
			entity.Site = this;
		}
		
		private void detach_SiteProperties(SiteProperties entity)
		{
			this.SendPropertyChanging();
			entity.Site = null;
		}
	}
	
	[Table(Name="")]
	public partial class SiteProperties : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SiteId;
		
		private string _PropertyName;
		
		private string _PropertyValue;
		
		private string _PropertyUri;
		
		private string _PropertyDescription;
		
		private EntityRef<Site> _Site;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSiteIdChanging(int value);
    partial void OnSiteIdChanged();
    partial void OnPropertyNameChanging(string value);
    partial void OnPropertyNameChanged();
    partial void OnPropertyValueChanging(string value);
    partial void OnPropertyValueChanged();
    partial void OnPropertyUriChanging(string value);
    partial void OnPropertyUriChanged();
    partial void OnPropertyDescriptionChanging(string value);
    partial void OnPropertyDescriptionChanged();
    #endregion
		
		public SiteProperties()
		{
			this._Site = default(EntityRef<Site>);
			OnCreated();
		}
		
		[Column(Storage="_SiteId", IsPrimaryKey=true)]
		public int SiteId
		{
			get
			{
				return this._SiteId;
			}
			set
			{
				if ((this._SiteId != value))
				{
					if (this._Site.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIdChanging(value);
					this.SendPropertyChanging();
					this._SiteId = value;
					this.SendPropertyChanged("SiteId");
					this.OnSiteIdChanged();
				}
			}
		}
		
		[Column(Storage="_PropertyName", CanBeNull=false)]
		public string PropertyName
		{
			get
			{
				return this._PropertyName;
			}
			set
			{
				if ((this._PropertyName != value))
				{
					this.OnPropertyNameChanging(value);
					this.SendPropertyChanging();
					this._PropertyName = value;
					this.SendPropertyChanged("PropertyName");
					this.OnPropertyNameChanged();
				}
			}
		}
		
		[Column(Storage="_PropertyValue", CanBeNull=false)]
		public string PropertyValue
		{
			get
			{
				return this._PropertyValue;
			}
			set
			{
				if ((this._PropertyValue != value))
				{
					this.OnPropertyValueChanging(value);
					this.SendPropertyChanging();
					this._PropertyValue = value;
					this.SendPropertyChanged("PropertyValue");
					this.OnPropertyValueChanged();
				}
			}
		}
		
		[Column(Storage="_PropertyUri", CanBeNull=false)]
		public string PropertyUri
		{
			get
			{
				return this._PropertyUri;
			}
			set
			{
				if ((this._PropertyUri != value))
				{
					this.OnPropertyUriChanging(value);
					this.SendPropertyChanging();
					this._PropertyUri = value;
					this.SendPropertyChanged("PropertyUri");
					this.OnPropertyUriChanged();
				}
			}
		}
		
		[Column(Storage="_PropertyDescription", CanBeNull=false)]
		public string PropertyDescription
		{
			get
			{
				return this._PropertyDescription;
			}
			set
			{
				if ((this._PropertyDescription != value))
				{
					this.OnPropertyDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PropertyDescription = value;
					this.SendPropertyChanged("PropertyDescription");
					this.OnPropertyDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Site_SiteProperties", Storage="_Site", ThisKey="SiteId", OtherKey="SiteId", IsForeignKey=true)]
		public Site Site
		{
			get
			{
				return this._Site.Entity;
			}
			set
			{
				Site previousValue = this._Site.Entity;
				if (((previousValue != value) 
							|| (this._Site.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Site.Entity = null;
						previousValue.SiteProperties.Remove(this);
					}
					this._Site.Entity = value;
					if ((value != null))
					{
						value.SiteProperties.Add(this);
						this._SiteId = value.SiteId;
					}
					else
					{
						this._SiteId = default(int);
					}
					this.SendPropertyChanged("Site");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="")]
	public partial class VariableProperties : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VariableCode;
		
		private string _PropertyName;
		
		private string _PropertyDescription;
		
		private EntityRef<Variable> _Variable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVariableCodeChanging(string value);
    partial void OnVariableCodeChanged();
    partial void OnPropertyNameChanging(string value);
    partial void OnPropertyNameChanged();
    partial void OnPropertyDescriptionChanging(string value);
    partial void OnPropertyDescriptionChanged();
    #endregion
		
		public VariableProperties()
		{
			this._Variable = default(EntityRef<Variable>);
			OnCreated();
		}
		
		[Column(Storage="_VariableCode", DbType="nvarchar(50)", CanBeNull=false, IsPrimaryKey=true)]
		public string VariableCode
		{
			get
			{
				return this._VariableCode;
			}
			set
			{
				if ((this._VariableCode != value))
				{
					if (this._Variable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVariableCodeChanging(value);
					this.SendPropertyChanging();
					this._VariableCode = value;
					this.SendPropertyChanged("VariableCode");
					this.OnVariableCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PropertyName", DbType="nvarchar(255)", CanBeNull=false)]
		public string PropertyName
		{
			get
			{
				return this._PropertyName;
			}
			set
			{
				if ((this._PropertyName != value))
				{
					this.OnPropertyNameChanging(value);
					this.SendPropertyChanging();
					this._PropertyName = value;
					this.SendPropertyChanged("PropertyName");
					this.OnPropertyNameChanged();
				}
			}
		}
		
		[Column(Storage="_PropertyDescription", DbType="nvarchar(255)", CanBeNull=false)]
		public string PropertyDescription
		{
			get
			{
				return this._PropertyDescription;
			}
			set
			{
				if ((this._PropertyDescription != value))
				{
					this.OnPropertyDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PropertyDescription = value;
					this.SendPropertyChanged("PropertyDescription");
					this.OnPropertyDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Variable_VariableProperties", Storage="_Variable", ThisKey="VariableCode", OtherKey="VariableCode", IsForeignKey=true)]
		public Variable Variable
		{
			get
			{
				return this._Variable.Entity;
			}
			set
			{
				Variable previousValue = this._Variable.Entity;
				if (((previousValue != value) 
							|| (this._Variable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Variable.Entity = null;
						previousValue.VariableProperties.Remove(this);
					}
					this._Variable.Entity = value;
					if ((value != null))
					{
						value.VariableProperties.Add(this);
						this._VariableCode = value.VariableCode;
					}
					else
					{
						this._VariableCode = default(string);
					}
					this.SendPropertyChanged("Variable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="")]
	public partial class Series : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeriesId;
		
		private System.DateTimeOffset _BeginDateTime;
		
		private System.DateTimeOffset _EndDateTime;
		
		private int _SiteId;
		
		private string _VariableCode;
		
		private EntityRef<Variable> _Variables;
		
		private EntityRef<Site> _Sites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeriesIdChanging(int value);
    partial void OnSeriesIdChanged();
    partial void OnBeginDateTimeChanging(System.DateTimeOffset value);
    partial void OnBeginDateTimeChanged();
    partial void OnEndDateTimeChanging(System.DateTimeOffset value);
    partial void OnEndDateTimeChanged();
    partial void OnSiteIdChanging(int value);
    partial void OnSiteIdChanged();
    partial void OnVariableCodeChanging(string value);
    partial void OnVariableCodeChanged();
    #endregion
		
		public Series()
		{
			this._Variables = default(EntityRef<Variable>);
			this._Sites = default(EntityRef<Site>);
			OnCreated();
		}
		
		[Column(Storage="_SeriesId", DbType="int", IsPrimaryKey=true)]
		public int SeriesId
		{
			get
			{
				return this._SeriesId;
			}
			set
			{
				if ((this._SeriesId != value))
				{
					this.OnSeriesIdChanging(value);
					this.SendPropertyChanging();
					this._SeriesId = value;
					this.SendPropertyChanged("SeriesId");
					this.OnSeriesIdChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDateTime", DbType="DateTime")]
		public System.DateTimeOffset BeginDateTime
		{
			get
			{
				return this._BeginDateTime;
			}
			set
			{
				if ((this._BeginDateTime != value))
				{
					this.OnBeginDateTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginDateTime = value;
					this.SendPropertyChanged("BeginDateTime");
					this.OnBeginDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EndDateTime", DbType="DateTime")]
		public System.DateTimeOffset EndDateTime
		{
			get
			{
				return this._EndDateTime;
			}
			set
			{
				if ((this._EndDateTime != value))
				{
					this.OnEndDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EndDateTime = value;
					this.SendPropertyChanged("EndDateTime");
					this.OnEndDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_SiteId", DbType="int")]
		public int SiteId
		{
			get
			{
				return this._SiteId;
			}
			set
			{
				if ((this._SiteId != value))
				{
					this.OnSiteIdChanging(value);
					this.SendPropertyChanging();
					this._SiteId = value;
					this.SendPropertyChanged("SiteId");
					this.OnSiteIdChanged();
				}
			}
		}
		
		[Column(Storage="_VariableCode", DbType="nvarchar(50)", CanBeNull=false, IsPrimaryKey=true)]
		public string VariableCode
		{
			get
			{
				return this._VariableCode;
			}
			set
			{
				if ((this._VariableCode != value))
				{
					this.OnVariableCodeChanging(value);
					this.SendPropertyChanging();
					this._VariableCode = value;
					this.SendPropertyChanged("VariableCode");
					this.OnVariableCodeChanged();
				}
			}
		}
		
		[Association(Name="Series_Variable", Storage="_Variables", ThisKey="VariableCode", OtherKey="VariableCode", IsUnique=true, IsForeignKey=false)]
		public Variable Variables
		{
			get
			{
				return this._Variables.Entity;
			}
			set
			{
				Variable previousValue = this._Variables.Entity;
				if (((previousValue != value) 
							|| (this._Variables.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Variables.Entity = null;
						previousValue.Series = null;
					}
					this._Variables.Entity = value;
					if ((value != null))
					{
						value.Series = this;
					}
					this.SendPropertyChanged("Variables");
				}
			}
		}
		
		[Association(Name="Series_Site", Storage="_Sites", ThisKey="SiteId", OtherKey="SiteId", IsUnique=true, IsForeignKey=false)]
		public Site Sites
		{
			get
			{
				return this._Sites.Entity;
			}
			set
			{
				Site previousValue = this._Sites.Entity;
				if (((previousValue != value) 
							|| (this._Sites.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sites.Entity = null;
						previousValue.Series = null;
					}
					this._Sites.Entity = value;
					if ((value != null))
					{
						value.Series = this;
					}
					this.SendPropertyChanged("Sites");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
